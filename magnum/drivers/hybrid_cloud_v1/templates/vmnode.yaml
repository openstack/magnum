heat_template_version: 2014-10-16

description: >
  This is a nested stack that defines a single vm node,
  This stack is included by a ResourceGroup resource in the parent template (hybridcluster.yaml).

parameters:

  server_image:
    type: string
    description: glance image used to boot the server

  server_flavor:
    type: string
    description: flavor to use when booting the server

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server

  external_network:
    type: string
    description: uuid/name of a network to use for floating ip addresses

  fixed_network_id:
    type: string
    description: Network from which to allocate fixed addresses.

  fixed_subnet_id:
    type: string
    description: Subnet from which to allocate fixed addresses.

  network_driver:
    type: string
    description: network driver to use for instantiating vm networks

  flannel_network_cidr:
    type: string
    description: network range for flannel overlay network

  swarm_api_ip:
    type: string
    description: swarm master's api server ip address

  api_ip_address:
    type: string
    description: swarm master's api server public ip address

  cluster_uuid:
    type: string
    description: identifier for the cluster this template is generating

  magnum_url:
    type: string
    description: endpoint to retrieve TLS certs from

  tls_disabled:
    type: boolean
    description: whether or not to disable TLS

  secgroup_vm_node_id:
    type: string
    description: ID of the security group for vm node.

  etcd_server_ip:
    type: string
    description: ip address of the load balancer pool of etcd server.

  trustee_domain_id:
    type: string
    description: domain id of the trustee

  trustee_user_id:
    type: string
    description: user id of the trustee

  trustee_username:
    type: string
    description: username of the trustee

  trustee_password:
    type: string
    description: password of the trustee
    hidden: true

  trust_id:
    type: string
    description: id of the trust which is used by the trustee
    hidden: true

  auth_url:
    type: string
    description: url for keystone

resources:

  node_wait_handle:
    type: "OS::Heat::WaitConditionHandle"

  node_wait_condition:
    type: "OS::Heat::WaitCondition"
    depends_on: vm_node
    properties:
      handle: {get_resource: node_wait_handle}
      timeout: 6000

  ######################################################################
  #
  # software configs.  these are components that are combined into
  # a multipart MIME user-data archive.
  write_heat_params:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/write-heat-params-node.yaml}
          params:
            "$WAIT_HANDLE_ENDPOINT": {get_attr: [node_wait_handle, endpoint]}
            "$WAIT_HANDLE_TOKEN": {get_attr: [node_wait_handle, token]}
            "$WAIT_CURL": {get_attr: [node_wait_handle, curl_cli]}
            "$SWARM_API_IP": {get_param: swarm_api_ip}
            "$SWARM_NODE_IP": {get_attr: [vm_node_eth0, fixed_ips, 0, ip_address]}
            "$CLUSTER_UUID": {get_param: cluster_uuid}
            "$MAGNUM_URL": {get_param: magnum_url}
            "$TLS_DISABLED": {get_param: tls_disabled}
            # "$NETWORK_DRIVER": {get_param: network_driver}
            "$ETCD_SERVER_IP": {get_param: etcd_server_ip}
            "$API_IP_ADDRESS": {get_param: api_ip_address}
            # "$TRUSTEE_DOMAIN_ID": {get_param: trustee_domain_id}
            # "$TRUSTEE_USER_ID": {get_param: trustee_user_id}
            # "$TRUSTEE_USERNAME": {get_param: trustee_username}
            # "$TRUSTEE_PASSWORD": {get_param: trustee_password}
            # "$TRUST_ID": {get_param: trust_id}
            "$AUTH_URL": {get_param: auth_url}

  # make_cert:
  #   type: "OS::Heat::SoftwareConfig"
  #   properties:
  #     group: ungrouped
  #     config: {get_file: fragments/make-cert.py}

  # network_service:
  #   type: "OS::Heat::SoftwareConfig"
  #   properties:
  #     group: ungrouped
  #     config: {get_file: fragments/network-service.sh}

  cfn_signal:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/cfn-signal.sh}

  disable_selinux:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/disable-selinux.sh}

  vm_node_init:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
        - config: {get_resource: disable_selinux}
        - config: {get_resource: write_heat_params}
        # - config: {get_resource: make_cert}
        # - config: {get_resource: network_service}
        - config: {get_resource: cfn_signal}

  vm_node:
    type: "OS::Nova::Server"
    properties:
      image:
        get_param: server_image
      flavor:
        get_param: server_flavor
      key_name:
        get_param: ssh_key_name
      user_data_format: RAW
      user_data: {get_resource: vm_node_init}
      networks:
        - port:
            get_resource: vm_node_eth0

  vm_node_eth0:
    type: "OS::Neutron::Port"
    properties:
      network_id:
        get_param: fixed_network_id
      security_groups:
        - {get_param: secgroup_vm_node_id}
      fixed_ips:
        - subnet_id:
            get_param: fixed_subnet_id
      allowed_address_pairs:
        - ip_address: {get_param: flannel_network_cidr}

  vm_node_floating:
    type: "OS::Neutron::FloatingIP"
    properties:
      floating_network:
        get_param: external_network
      port_id:
        get_resource: vm_node_eth0


outputs:

  vm_node_ip:
    value: {get_attr: [vm_node_eth0, fixed_ips, 0, ip_address]}
    description: >
      This is the "private" address of the vm node.

  vm_node_external_ip:
    value: {get_attr: [vm_node_floating, floating_ip_address]}
    description: >
      This is the "public" address of the vm node.
